2、身份验证CA和证书
    解决上述身份验证问题的关键是确保获取的公钥途径是合法的，能够验证服务器的身份信息，
	为此需要引入权威的第三方机构CA(如沃通CA)。CA 负责核实公钥的拥有者的信息，并颁发认证"证书"，
	同时能够为使用者提供证书验证服务，即PKI体系(PKI基础知识)
	
	证书 = 公钥 + 申请者与签发者信息 + 签名
	
	1. 申请证书
	   生成（公钥+私钥）对 
	  域名+申请者+公钥 生成请求文件.csr  # 不含私钥
	  
	2. 认证机构签名
	   对明文信息info签名(加密)
	   sig = 私钥( Hash(info) )
       info = 签发机构 + 有效时间+	扩展信息 + 域名 + 申请者 + 公钥
	   
	3. 验证证书
	  3.1. 计算明文摘要 Hash(info)
	  3.2. 用CA公钥对签名（sig) 解密
	  3.3. 3.1 == 3.2
	  3.4. 验证其他信息 域名、有效期、是否吊销 //OCSP/CRL
	  
-----------------------------------------------------------------------------------------------

1. client  -->  clientHello( 版本、压缩算法、支持的加密算法套件、随机数、扩展项 ) --> server
    • 客户端支持的加密套件 cipher suites 列表
	• 随机数 random_C，用于后续的密钥的生成;
	• 支持的压缩算法 compression methods 列表，用于后续的信息压缩传输;

server_hello+server_certificate+sever_hello_done

2. server  -->  serverHello( 版本、随机数、选择一个加密算法 ) --> client
   • random_S 随机数用于后续的密钥协商
   • Cipher Suite: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 (0xc02f)
   • 认证算法 Au (身份验证)、密钥交换算法 KeyExchange(密钥协商)、对称加密算法 Enc (信息加密)和信息摘要 Mac(完整性校验)
   
3. server  --> Certificate 链 --> client
   • 服务器端配置对应的证书链，用于身份验证与密钥交换; 

3. server key exchange  # optional 
   对于使用DHE/ECDHE非对称密钥协商算法的SSL握手，将发送该类型握手。
   RSA算法不会继续该握手流程（DH、ECDH也不会发送server key exchange）
   
   ECDH 全称是椭圆曲线迪菲-赫尔曼秘钥交换(Elliptic Curve Diffie–Hellman key Exchange
   04 + x + y
   Pubkey: 0432d6fda64337dc9db5e13901bd39c0d775591a37ac1dc1bd30bba889e9f71702f0db4bf58536278d17e10542bb63205e48e0b4fbf828aea84c5c92f1e4e40f32…
   signature  sig_RSA( hash_sha256( Curve type + 04xy)) 
 
4. server hello done
   • 通知客户端 server_hello 信息发送结束
   
客户端验证证书合法性
   • 证通过才会进行后续通信
   • [证书链]的可信性 trusted certificate path
   • 证书是否吊销 revocation，有两类方式离线 CRL 与在线 OCSP，不同的客户端行为会不同;
   • 有效期 expiry date，证书是否在有效时间范围;
   • 域名 domain，核查证书域名是否与当前的访问域名匹配，匹配规则后续分析;   



client_key_exchange+change_cipher_spec+encrypted_handshake_message

4. client --- client key exchange，change cipher Spec, encypted handshake ---> server 

    ECDH/ECDHE下client key exchange
    客户端随机生成一个大数 乘 basePoint 得到 public key
    04 + x +y
	• client_key_exchange，合法性验证通过之后，客户端计算产生随机数字 Pre-master，并用证书公钥加密，发送给服务器
	• 客户端已经获取全部的计算协商密钥需要的信息：
	    两个明文随机数 random_C 和 random_S 与自己计算产生的 Pre-master，计算得到协商密钥
		enc_key=Fuc(random_C, random_S, Pre-Master)
	• change_cipher_spec(更改密码规格)，客户端通知服务器后续的通信都采用协商的通信密钥和加密算法进行加密通信	
	
    • encrypted_handshake_message，结合之前所有通信参数的 hash 值与其它相关信息生成一段数据，
	   采用协商密钥 session secret 与算法进行加密，然后发送给服务器用于数据与握手验证;

服务器测：
change_cipher_spec + encrypted_handshake_message
	• 服务器用私钥解密加密的 Pre-master 数据，基于之前交换的两个明文随机数 random_C 和 random_S，
	  计算得到协商密钥:enc_key=Fuc(random_C, random_S, Pre-Master)
	• 计算之前所有接收信息的 hash 值，然后解密客户端发送的 encrypted_handshake_message，验证数据和密钥正确性
      
	  change_cipher_spec, 验证通过之后，服务器同样发送 change_cipher_spec 
	  以告知客户端后续的通信都采用协商的密钥与算法进行加密通信
	  encrypted_handshake_message, 服务器也结合所有当前的通信参数信息生成一段数据
	  并采用协商密钥 session secret 与算法加密并发送到客户端
	

握手结束
    客户端计算所有接收信息的 hash 值，并采用协商密钥解密 encrypted_handshake_message，
	 验证服务器发送的数据和密钥，验证通过则握手完成
	 

